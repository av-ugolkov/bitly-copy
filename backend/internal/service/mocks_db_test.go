// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockdb creates a new instance of Mockdb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockdb {
	mock := &Mockdb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mockdb is an autogenerated mock type for the db type
type Mockdb struct {
	mock.Mock
}

type Mockdb_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockdb) EXPECT() *Mockdb_Expecter {
	return &Mockdb_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type Mockdb
func (_mock *Mockdb) Get(ctx context.Context, key string) (string, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockdb_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Mockdb_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *Mockdb_Expecter) Get(ctx interface{}, key interface{}) *Mockdb_Get_Call {
	return &Mockdb_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Mockdb_Get_Call) Run(run func(ctx context.Context, key string)) *Mockdb_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockdb_Get_Call) Return(s string, err error) *Mockdb_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Mockdb_Get_Call) RunAndReturn(run func(ctx context.Context, key string) (string, error)) *Mockdb_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type Mockdb
func (_mock *Mockdb) GetAll(ctx context.Context, key string) ([]string, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockdb_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Mockdb_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *Mockdb_Expecter) GetAll(ctx interface{}, key interface{}) *Mockdb_GetAll_Call {
	return &Mockdb_GetAll_Call{Call: _e.mock.On("GetAll", ctx, key)}
}

func (_c *Mockdb_GetAll_Call) Run(run func(ctx context.Context, key string)) *Mockdb_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockdb_GetAll_Call) Return(strings []string, err error) *Mockdb_GetAll_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *Mockdb_GetAll_Call) RunAndReturn(run func(ctx context.Context, key string) ([]string, error)) *Mockdb_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function for the type Mockdb
func (_mock *Mockdb) Increment(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mockdb_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type Mockdb_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *Mockdb_Expecter) Increment(ctx interface{}, key interface{}) *Mockdb_Increment_Call {
	return &Mockdb_Increment_Call{Call: _e.mock.On("Increment", ctx, key)}
}

func (_c *Mockdb_Increment_Call) Run(run func(ctx context.Context, key string)) *Mockdb_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockdb_Increment_Call) Return(err error) *Mockdb_Increment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mockdb_Increment_Call) RunAndReturn(run func(ctx context.Context, key string) error) *Mockdb_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type Mockdb
func (_mock *Mockdb) Remove(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mockdb_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Mockdb_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx
//   - key
func (_e *Mockdb_Expecter) Remove(ctx interface{}, key interface{}) *Mockdb_Remove_Call {
	return &Mockdb_Remove_Call{Call: _e.mock.On("Remove", ctx, key)}
}

func (_c *Mockdb_Remove_Call) Run(run func(ctx context.Context, key string)) *Mockdb_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockdb_Remove_Call) Return(err error) *Mockdb_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mockdb_Remove_Call) RunAndReturn(run func(ctx context.Context, key string) error) *Mockdb_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// SetNX provides a mock function for the type Mockdb
func (_mock *Mockdb) SetNX(ctx context.Context, key string, value string) (bool, error) {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, key, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mockdb_SetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNX'
type Mockdb_SetNX_Call struct {
	*mock.Call
}

// SetNX is a helper method to define mock.On call
//   - ctx
//   - key
//   - value
func (_e *Mockdb_Expecter) SetNX(ctx interface{}, key interface{}, value interface{}) *Mockdb_SetNX_Call {
	return &Mockdb_SetNX_Call{Call: _e.mock.On("SetNX", ctx, key, value)}
}

func (_c *Mockdb_SetNX_Call) Run(run func(ctx context.Context, key string, value string)) *Mockdb_SetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Mockdb_SetNX_Call) Return(b bool, err error) *Mockdb_SetNX_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Mockdb_SetNX_Call) RunAndReturn(run func(ctx context.Context, key string, value string) (bool, error)) *Mockdb_SetNX_Call {
	_c.Call.Return(run)
	return _c
}
